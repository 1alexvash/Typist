{"version":3,"sources":["levels.js","App.js","serviceWorker.js","index.js","sounds/sound_success.mp3","sounds/sound_failure.mp3"],"names":["levels","easy","medium","hard","nightmare","successMelody","Audio","successSound","mistakeMelody","mistakeSound","App","state","isPlaying","level","randomCharacter","inputData","score","multiplier","totalScore","undefined","localStorage","JSON","parse","this","setState","value","stringify","_this2","generateRandomCharacter","refs","myInput","focus","string","Math","floor","random","length","e","_this3","_this$state","target","play","currentTime","updateTotalScore","_this4","_this$state2","react_default","a","createElement","className","title","type","autoCapitalize","ref","onChange","inputTyping","onClick","returnBack","startTyping","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.da57f5d7.chunk.js","sourcesContent":["const levels = {\r\n  easy: \"abcdefghijklmnopqrstuvwxyz\",\r\n  medium: \"abcdefghijklmnopqrstuvwxyz0123456789\",\r\n  hard: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\r\n  nightmare:\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+=-\"\r\n};\r\n\r\nexport default levels;\r\n","import React, { Component } from \"react\";\r\nimport \"./scss/main.css\";\r\nimport levels from \"./levels\";\r\nimport successSound from \"./sounds/sound_success.mp3\";\r\nimport mistakeSound from \"./sounds/sound_failure.mp3\";\r\n\r\nconst successMelody = new Audio(successSound);\r\nconst mistakeMelody = new Audio(mistakeSound);\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isPlaying: false,\r\n    level: \"\",\r\n    randomCharacter: \"\",\r\n    inputData: \"\",\r\n    score: 0,\r\n    multiplier: null,\r\n    totalScore: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (localStorage.totalScore !== undefined) {\r\n      let totalScore = JSON.parse(localStorage.totalScore);\r\n      this.setState({ totalScore });\r\n    }\r\n  }\r\n\r\n  updateTotalScore(value) {\r\n    let { totalScore } = this.state;\r\n    totalScore = totalScore + value;\r\n    localStorage.totalScore = JSON.stringify(totalScore);\r\n    this.setState({ totalScore });\r\n  }\r\n\r\n  startTyping(level, multiplier) {\r\n    this.setState({ isPlaying: true, multiplier, level }, () => {\r\n      this.generateRandomCharacter();\r\n      this.refs.myInput.focus();\r\n    });\r\n  }\r\n\r\n  generateRandomCharacter() {\r\n    const string = this.state.level;\r\n    let random = Math.floor(Math.random() * string.length);\r\n    let randomCharacter = string[random];\r\n    this.setState({ randomCharacter });\r\n  }\r\n\r\n  inputTyping(e) {\r\n    let { randomCharacter, score, multiplier } = this.state;\r\n\r\n    let character = e.target.value;\r\n    if (character === randomCharacter) {\r\n      score = score + 5 * multiplier;\r\n      successMelody.play();\r\n      successMelody.currentTime = 0;\r\n      this.setState({ score }, () => this.generateRandomCharacter());\r\n    } else {\r\n      score = score - 5 * multiplier;\r\n      mistakeMelody.play();\r\n      mistakeMelody.currentTime = 0;\r\n      this.setState({ score });\r\n    }\r\n  }\r\n\r\n  returnBack() {\r\n    let { score } = this.state;\r\n    this.updateTotalScore(score);\r\n    this.setState({ score: 0, isPlaying: false });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isPlaying,\r\n      randomCharacter,\r\n      inputData,\r\n      score,\r\n      totalScore\r\n    } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n        {isPlaying ? (\r\n          <div className=\"game\">\r\n            <div className=\"zoom\">\r\n              <div className=\"block\" title=\"Type this character\">\r\n                <div className=\"symbol\">{randomCharacter}</div>\r\n              </div>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"input\"\r\n              autoCapitalize=\"off\"\r\n              value={inputData}\r\n              ref=\"myInput\"\r\n              onChange={e => this.inputTyping(e)}\r\n            />\r\n            <div className=\"score\">\r\n              Score: <b>{score}</b>\r\n            </div>\r\n            <div className=\"return-back\">\r\n              <button onClick={() => this.returnBack()}>Return back</button>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div className=\"menu\">\r\n            <h1 className=\"heading\">\r\n              Start Typing\r\n              <p>Mood:</p>\r\n            </h1>\r\n            <div className=\"levels\">\r\n              <button onClick={() => this.startTyping(levels.easy, 2)}>\r\n                Easy\r\n              </button>\r\n              <button onClick={() => this.startTyping(levels.medium, 3)}>\r\n                Medium\r\n              </button>\r\n              <button onClick={() => this.startTyping(levels.hard, 4)}>\r\n                Hard\r\n              </button>\r\n              <button onClick={() => this.startTyping(levels.nightmare, 5)}>\r\n                Nightmare\r\n              </button>\r\n            </div>\r\n            {totalScore !== 0 ? (\r\n              <div className=\"total-score\">\r\n                Your total score: <b>{totalScore}</b>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","module.exports = __webpack_public_path__ + \"static/media/sound_success.dcbb5b43.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_failure.7768c1d0.mp3\";"],"sourceRoot":""}