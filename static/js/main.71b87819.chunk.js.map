{"version":3,"sources":["levels.js","App.js","serviceWorker.js","index.js","sounds/sound_success.mp3","sounds/sound_failure.mp3"],"names":["levels","easy","medium","hard","nightmare","successMelody","Audio","successSound","mistakeMelody","mistakeSound","App","state","isPlaying","level","randomCharacter","inputData","score","multiplier","totalScore","undefined","localStorage","JSON","parse","this","setState","value","stringify","_this2","generateRandomCharacter","refs","myInput","focus","string","Math","floor","random","length","e","_this3","_this$state","target","play","currentTime","updateTotalScore","_this4","_this$state2","react_default","a","createElement","className","title","type","ref","onChange","inputTyping","onClick","returnBack","startTyping","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.71b87819.chunk.js","sourcesContent":["const levels = {\r\n  easy: \"abcdefghijklmnopqrstuvwxyz\",\r\n  medium: \"abcdefghijklmnopqrstuvwxyz0123456789\",\r\n  hard: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\r\n  nightmare:\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+=-\"\r\n};\r\n\r\nexport default levels;\r\n","import React, { Component } from \"react\";\nimport \"./scss/main.css\";\nimport levels from \"./levels\";\nimport successSound from \"./sounds/sound_success.mp3\";\nimport mistakeSound from \"./sounds/sound_failure.mp3\";\n\nconst successMelody = new Audio(successSound);\nconst mistakeMelody = new Audio(mistakeSound);\n\nclass App extends Component {\n  state = {\n    isPlaying: false,\n    level: \"\",\n    randomCharacter: \"\",\n    inputData: \"\",\n    score: 0,\n    multiplier: null,\n    totalScore: 0\n  };\n\n  componentDidMount() {\n    if (localStorage.totalScore !== undefined) {\n      let totalScore = JSON.parse(localStorage.totalScore);\n      this.setState({ totalScore });\n    }\n  }\n\n  updateTotalScore(value) {\n    let { totalScore } = this.state;\n    totalScore = totalScore + value;\n    localStorage.totalScore = JSON.stringify(totalScore);\n    this.setState({ totalScore });\n  }\n\n  startTyping(level, multiplier) {\n    this.setState({ isPlaying: true, multiplier, level }, () => {\n      this.generateRandomCharacter();\n      this.refs.myInput.focus();\n    });\n  }\n\n  generateRandomCharacter() {\n    const string = this.state.level;\n    let random = Math.floor(Math.random() * string.length);\n    let randomCharacter = string[random];\n    this.setState({ randomCharacter });\n  }\n\n  inputTyping(e) {\n    let { randomCharacter, score, multiplier } = this.state;\n\n    let character = e.target.value;\n    if (character === randomCharacter) {\n      score = score + 5 * multiplier;\n      successMelody.play();\n      successMelody.currentTime = 0;\n      this.setState({ score }, () => this.generateRandomCharacter());\n    } else {\n      score = score - 5 * multiplier;\n      mistakeMelody.play();\n      mistakeMelody.currentTime = 0;\n      this.setState({ score });\n    }\n  }\n\n  returnBack() {\n    let { score } = this.state;\n    this.updateTotalScore(score);\n    this.setState({ score: 0, isPlaying: false });\n  }\n\n  render() {\n    const {\n      isPlaying,\n      randomCharacter,\n      inputData,\n      score,\n      totalScore\n    } = this.state;\n    return (\n      <div className=\"App\">\n        {isPlaying ? (\n          <div className=\"game\">\n            <div className=\"zoom\">\n              <div className=\"block\" title=\"Type this character\">\n                <div className=\"symbol\">{randomCharacter}</div>\n              </div>\n            </div>\n            <input\n              type=\"text\"\n              className=\"input\"\n              value={inputData}\n              ref=\"myInput\"\n              onChange={e => this.inputTyping(e)}\n            />\n            <div className=\"score\">\n              Score: <b>{score}</b>\n            </div>\n            <div className=\"return-back\">\n              <button onClick={() => this.returnBack()}>Return back</button>\n            </div>\n          </div>\n        ) : (\n          <div className=\"menu\">\n            <h1 className=\"heading\">\n              Start Typing\n              <p>Mood:</p>\n            </h1>\n            <div className=\"levels\">\n              <button onClick={() => this.startTyping(levels.easy, 2)}>\n                Easy\n              </button>\n              <button onClick={() => this.startTyping(levels.medium, 3)}>\n                Medium\n              </button>\n              <button onClick={() => this.startTyping(levels.hard, 4)}>\n                Hard\n              </button>\n              <button onClick={() => this.startTyping(levels.nightmare, 5)}>\n                Nightmare\n              </button>\n            </div>\n            {totalScore !== 0 ? (\n              <div className=\"total-score\">\n                Your total score: <b>{totalScore}</b>\n              </div>\n            ) : null}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/sound_success.dcbb5b43.mp3\";","module.exports = __webpack_public_path__ + \"static/media/sound_failure.7768c1d0.mp3\";"],"sourceRoot":""}